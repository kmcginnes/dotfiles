[hub]
        protocol = https
[user]
        name = Kris McGinnes
        email = kmcginnes@me.com
[credential]
        helper = osxkeychain
[alias]
        co = checkout
        promote = !$ZSH/bin/git-promote
        wtf     = !$ZSH/bin/git-wtf
        rank-contributors = !$ZSH/bin/git-rank-contributors
        count   = !git shortlog -sn

        # Snagged from Ryan Tomayko (http://github.com/rtomayko/dotfiles)
        # commit
        cm = commit -m
        cam = !git add -A && git commit -m
        amend = commit --amend            # ammend your last commit
        ammend = commit --amend           # ammend your last commit
        
        # branch
        b = branch
        rename = branch -m
        
        # add
        a = add
        aa = add --update
        ap = add --patch
        
        # checkout
        co = checkout
        cob = checkout -b
        
        # fetch
        f = fetch
        fo = fetch origin

        # merge
        m = merge
        
        # pull
        pr = pull --rebase
        update = !$ZSH/bin/git-svn-update
        up = !$ZSH/bin/git-svn-update

        #push
        pgm = push github master
        pom = push origin master

        # rebase
        r  = rebase
        rm = rebase master
        rom = rebase origin/master
        ri = rebase --interactive HEAD~10
        rim = rebase --interactive master
        rc = rebase --continue
        ra = rebase --abort
        
        # diff
        d = diff
        p = diff --cached # mnemonic: "patch"
        ds = diff --stat # mnemonic: "diff stat"
        dt = difftool --no-prompt
        mt = mergetool
        
        # status
        s = !git status && git stash list
        
        # log
        lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
        lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
        lg = !"git lg1"
        lc = log --stat --summary
        l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
        new = log master.. --reverse  --color --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr)' --abbrev-commit
        today = log --since=midnight --author='kmcginnes' --oneline
        standup = log --since='1 day ago' --author='kmcginnes' --oneline
        
        # clean
        prune = fetch --prune
        cleanup = clean -f -x -d --dry-run
        cleanupnow = clean -f -x -d

        # stash
        st = stash save
        # 1. Create a branch named “foobar”
        # 2. Commit any changes on that branch
        # 3. Swap you back to the branch you started on
        save = !sh -c 'export PREV=$(git symbolic-ref HEAD|cut -d/ -f3-) && git checkout -b "$1" && git commit -am "$1" && git checkout "$PREV"'

        # tfs
        tpush = tf checkin
        tpull = tf pull --rebase

        # misc
        pi = cherry-pick
        ki = stash --keep-index

        # experimental
        ship = !$ZSH/bin/git-svn-ship
        open = !git ls-remote --get-url | sed 's/:/\\//' | sed 's/^git@/https:\\/\\//' | xargs open
        unstage = reset HEAD
        uncommit = reset --soft HEAD^
        undo = reset --hard HEAD
        stage = add
        pop = reset --soft HEAD^
        rv = review
        tu = tupdate
        ts = tship
        fp = format-patch --stdout
[color]
        diff = auto
        status = auto
        branch = auto
        ui = true
[core]
        excludesfile = ~/.gitignore
        editor = vim
        autocrlf = false
        ignorecase = true
        whitespace = trailing-space,space-before-tab
[apply]
        whitespace = nowarn
[mergetool]
        keepBackup = false
        prompt = false
[difftool]
        prompt = false
[help]
        autocorrect = 1
[push]
        # See `git help config` (search for push.default)
        # for more information on different options of the below setting.
        #
        # Setting to git 2.0 default to surpress warning message
        default = simple
[mergetool "Kaleidoscope"]
        cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
        trustexitcode = true
[merge]
        tool = Kaleidoscope
[difftool "Kaleidoscope"]
        cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
        tool = Kaleidoscope
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
